

# sudo apt install ???
# ninja -f ./resources/wasm32.ninja


cpp = clang++-12
ar = llvm-ar-12
cflags = -emit-llvm --target=wasm32 -ffreestanding --no-standard-libraries -DAKO_FREESTANDING $
 -c -I ./library/ -Werror -Wall -Wextra -Wconversion -pedantic -Wold-style-cast


rule CompileCpp
 command = $cpp $cflags $in -o $out
rule Pack
 command = $ar -rcs $out $in


build ./build/wasm32/library/common/conversions.o: CompileCpp ./library/common/conversions.cpp
build ./build/wasm32/library/common/defaults.o:    CompileCpp ./library/common/defaults.cpp
build ./build/wasm32/library/common/utilities.o:   CompileCpp ./library/common/utilities.cpp
build ./build/wasm32/library/common/version.o:     CompileCpp ./library/common/version.cpp
build ./build/wasm32/library/decode/decode.o:      CompileCpp ./library/decode/decode.cpp
build ./build/wasm32/library/decode/format.o:      CompileCpp ./library/decode/format.cpp
build ./build/wasm32/library/encode/encode.o:      CompileCpp ./library/encode/encode.cpp
build ./build/wasm32/library/encode/format.o:      CompileCpp ./library/encode/format.cpp

build ./build/wasm32-libako-static.a: Pack $
 ./build/wasm32/library/common/conversions.o $
 ./build/wasm32/library/common/defaults.o $
 ./build/wasm32/library/common/utilities.o $
 ./build/wasm32/library/common/version.o $
 ./build/wasm32/library/decode/decode.o $
 ./build/wasm32/library/decode/format.o $
 ./build/wasm32/library/encode/encode.o $
 ./build/wasm32/library/encode/format.o
